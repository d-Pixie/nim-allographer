selectSql	query_builder/exec.html#selectSql,RDB	exec: selectSql(this: RDB): string	
getAllRowsPlain	query_builder/exec.html#getAllRowsPlain,string,varargs[string]	exec: getAllRowsPlain(sqlString: string; args: varargs[string]): seq[seq[string]]	
getAllRowsPlain	query_builder/exec.html#getAllRowsPlain,DbConn,string,varargs[string]	exec: getAllRowsPlain(db: DbConn; sqlString: string; args: varargs[string]): seq[\n    seq[string]]	
toSql	query_builder/exec.html#toSql,RDB	exec: toSql(this: RDB): string	
get	query_builder/exec.html#get,RDB	exec: get(this: RDB): seq[JsonNode]	
get	query_builder/exec.html#get,RDB,typedesc	exec: get(this: RDB; typ: typedesc): seq[typ.type]	
getPlain	query_builder/exec.html#getPlain,RDB	exec: getPlain(this: RDB): seq[seq[string]]	
getRaw	query_builder/exec.html#getRaw,RDB	exec: getRaw(this: RDB): seq[JsonNode]	
getRaw	query_builder/exec.html#getRaw,RDB,typedesc	exec: getRaw(this: RDB; typ: typedesc): seq[typ.type]	
first	query_builder/exec.html#first,RDB	exec: first(this: RDB): JsonNode	
first	query_builder/exec.html#first,RDB,typedesc	exec: first(this: RDB; typ: typedesc): Option[typ.type]	
firstPlain	query_builder/exec.html#firstPlain,RDB	exec: firstPlain(this: RDB): seq[string]	
find	query_builder/exec.html#find,RDB,int,string	exec: find(this: RDB; id: int; key = &quot;id&quot;): JsonNode	
find	query_builder/exec.html#find,RDB,int,typedesc,string	exec: find(this: RDB; id: int; typ: typedesc; key = &quot;id&quot;): Option[typ.type]	
findPlain	query_builder/exec.html#findPlain,RDB,int,string	exec: findPlain(this: RDB; id: int; key = &quot;id&quot;): seq[string]	
insertSql	query_builder/exec.html#insertSql,RDB,JsonNode	exec: insertSql(this: RDB; items: JsonNode): string	
insert	query_builder/exec.html#insert,RDB,JsonNode	exec: insert(this: RDB; items: JsonNode)	
insert	query_builder/exec.html#insert,RDB,openArray[JsonNode]	exec: insert(this: RDB; rows: openArray[JsonNode])	
inserts	query_builder/exec.html#inserts,RDB,openArray[JsonNode]	exec: inserts(this: RDB; rows: openArray[JsonNode])	
insertID	query_builder/exec.html#insertID,RDB,JsonNode	exec: insertID(this: RDB; items: JsonNode): int	
insertID	query_builder/exec.html#insertID,RDB,openArray[JsonNode]	exec: insertID(this: RDB; rows: openArray[JsonNode]): int	
insertsID	query_builder/exec.html#insertsID,RDB,openArray[JsonNode]	exec: insertsID(this: RDB; rows: openArray[JsonNode]): seq[int]	
updateSql	query_builder/exec.html#updateSql,RDB,JsonNode	exec: updateSql(this: RDB; items: JsonNode): string	
update	query_builder/exec.html#update,RDB,JsonNode	exec: update(this: RDB; items: JsonNode)	
deleteSql	query_builder/exec.html#deleteSql,RDB	exec: deleteSql(this: RDB): string	
delete	query_builder/exec.html#delete,RDB	exec: delete(this: RDB)	
delete	query_builder/exec.html#delete,RDB,int,string	exec: delete(this: RDB; id: int; key = &quot;id&quot;)	
exec	query_builder/exec.html#exec,RDB	exec: exec(this: RDB)	
count	query_builder/exec.html#count,RDB	exec: count(this: RDB): int	
max	query_builder/exec.html#max,RDB,string	exec: max(this: RDB; column: string): string	
min	query_builder/exec.html#min,RDB,string	exec: min(this: RDB; column: string): string	
avg	query_builder/exec.html#avg,RDB,string	exec: avg(this: RDB; column: string): float	
sum	query_builder/exec.html#sum,RDB,string	exec: sum(this: RDB; column: string): float	
paginate	query_builder/exec.html#paginate,RDB,int,int	exec: paginate(this: RDB; display: int; page: int = 1): JsonNode	
fastPaginate	query_builder/exec.html#fastPaginate,RDB,int,string,Order	exec: fastPaginate(this: RDB; display: int; key = &quot;id&quot;; order: Order = Asc): JsonNode	
fastPaginateNext	query_builder/exec.html#fastPaginateNext,RDB,int,int,string,Order	exec: fastPaginateNext(this: RDB; display: int; id: int; key = &quot;id&quot;;\n                 order: Order = Asc): JsonNode	
fastPaginateBack	query_builder/exec.html#fastPaginateBack,RDB,int,int,string,Order	exec: fastPaginateBack(this: RDB; display: int; id: int; key = &quot;id&quot;;\n                 order: Order = Asc): JsonNode	
